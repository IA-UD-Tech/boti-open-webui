name: Deploy PROD EC2 (tagged release only)

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["Create and publish Docker images with specific build args"]
    types:
      - completed
    branches:
      - main

permissions:
  contents: read
  packages: read

env:
  GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
  GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  WEBUI_SECRET_KEY_PROD: ${{ secrets.WEBUI_SECRET_KEY_PROD }}
  PIPELINES_API_KEY_PROD: ${{ secrets.PIPELINES_API_KEY_PROD }}
  
jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check for changes in package.json
        run: |
          git diff --cached --diff-filter=d package.json || {
            echo "No changes to package.json"
            exit 1
          }

      - name: Get version number from package.json
        id: get_version
        run: |
          VERSION=$(jq -r '.version' package.json)
          echo "VERSION=$VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      
      - name: Deploy to EC2 Prod
        uses: appleboy/ssh-action@v1.0.3
        env:
          VERSION_TAG: ${{ steps.get_version.outputs.version }}
        with:
          host: boti.deusto.es
          username: ubuntu
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY_PROD }}
          envs: GOOGLE_CLIENT_ID, GOOGLE_CLIENT_SECRET, OPENAI_API_KEY, WEBUI_SECRET_KEY_PROD, PIPELINES_API_KEY_PROD, VERSION_TAG
          script: |
            echo "DEBUG: VERSION_TAG is $VERSION_TAG"
            cd /home/ubuntu/app

            echo "üì• Downloading docker-compose.prod.yml from tag $VERSION_TAG..."
            curl -L https://raw.githubusercontent.com/iaud-tech/boti-open-webui/refs/tags/v$VERSION_TAG/docker-compose.prod.yml -o docker-compose.yml


            echo "üîß Creating .env file..."
            cat <<EOF > .env
            ENV=prod
            WEBUI_NAME=Boti
            DEFAULT_LOCALE=es
            OPENAI_API_KEY=${OPENAI_API_KEY}
            WEBUI_SECRET_KEY=${WEBUI_SECRET_KEY_PROD}
            ENABLE_LOGIN_FORM=true
            ENABLE_OAUTH_SIGNUP=false
            GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
            GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
            WEBUI_URL=https://boti.deusto.es
            PIPELINES_API_KEY=${PIPELINES_API_KEY_PROD}
            OPEN_WEBUI_PORT=3000
            VERSION_TAG=$VERSION_TAG
            EOF

            echo "üîå Ensuring Docker network 'caddy-net' exists..."
            docker network inspect caddy-net >/dev/null 2>&1 || docker network create caddy-net

            echo "‚¨áÔ∏è Pulling latest Docker images..."
            docker compose -f docker-compose.yml pull

            echo "üßπ Stopping old containers..."
            docker compose -f docker-compose.yml down

            echo "üöÄ Starting containers with updated images..."
            docker compose -f docker-compose.yml up -d

            echo "üßº Pruning unused images..."
            docker image prune -f

            echo "üóëÔ∏è Removing .env file with secrets..."
            rm .env



